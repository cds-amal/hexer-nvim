*hexer.txt*  Format and analyze hex data in Neovim

==============================================================================
CONTENTS                                                        *hexer-contents*

    1. Introduction ......................... |hexer-introduction|
    2. Setup ................................ |hexer-setup|
    3. Commands ............................. |hexer-commands|
    4. Configuration ........................ |hexer-configuration|
    5. API .................................. |hexer-api|
    6. Health Check ......................... |hexer-health|

==============================================================================
1. INTRODUCTION                                             *hexer-introduction*

hexer.nvim is a Neovim plugin for working with Solidity/Ethereum transaction
calldata and hex-encoded data. It formats hex strings by splitting them into
readable chunks with proper alignment and offset indicators.

Features:
- Format Ethereum calldata with automatic selector detection
- Convert hex bytes to ASCII representation
- Visual mode support for selecting hex data
- Configurable chunk sizes and display options
- Error handling with helpful messages

==============================================================================
2. SETUP                                                          *hexer-setup*

Install with your favorite plugin manager.

With lazy.nvim: >lua
    {
      "cds-amal/hexer-nvim",
      config = function()
        require("hexer").setup({
          -- your configuration
        })
      end
    }
<

Default setup: >lua
    require("hexer").setup()
<

==============================================================================
3. COMMANDS                                                    *hexer-commands*

                                                                  *:HexerFormat*
:HexerFormat [input]
    Format hex calldata. If no input is provided, uses the word under cursor
    or visual selection. Automatically detects and displays function selectors.

                                                            *:HexerBytesToAscii*
:HexerBytesToAscii [input]
    Convert hex bytes to ASCII representation. Non-printable characters are
    shown as dots.

                                                                 *:HexerDecode*
:HexerDecode [input]
    Decode ABI calldata using Foundry's cast 4byte-decode command. Shows the
    function signature and decoded arguments with a tree-structured view for
    complex nested data. Automatically detects common patterns like operator
    sets, strategies, and allocation parameters. Requires Foundry to be installed.

DEFAULT KEYMAPS                                              *hexer-keymaps*

The plugin provides the following default keymaps:
    <leader>hd    [H]exer [D]ecode - ABI decode calldata
    <leader>hf    [H]exer [F]ormat - Format hex calldata  
    <leader>ha    [H]exer [A]scii - Convert hex to ASCII

All keymaps work in both normal and visual mode.

To disable default keymaps, set before loading the plugin: >vim
    let g:hexer_no_mappings = 1
<

==============================================================================
4. CONFIGURATION                                         *hexer-configuration*

Setup options: >lua
    require("hexer").setup({
      -- Display options
      group_size = 64,        -- Characters per line (32 bytes)
      chunk_size = 8,         -- Characters per chunk
      show_offset = true,     -- Show offset comments
      offset_format = "both", -- "hex", "decimal", or "both"
      
      -- Formatting options
      show_selector = true,   -- Show selector line for calldata
      uppercase = false,      -- Use uppercase hex letters
      
      -- UI options
      output_method = "insert", -- "insert", "float", or "virtual"
      float_opts = {
        border = "rounded",
        width = 0.8,
        height = 0.6,
      },
      
      -- Highlight groups
      highlights = {
        selector = "Title",
        offset = "Comment",
        data = "Normal",
      },
    })
<

==============================================================================
5. API                                                              *hexer-api*

The plugin exposes the following Lua API:

                                                      *hexer.format_calldata()*
hexer.format_calldata([input], [opts])
    Format hex calldata with automatic selector detection.
    
    Parameters:
      - input: Hex string to format (optional, defaults to cursor word)
      - opts: Table with options (optional)
        - group_size: Override default group size

                                                      *hexer.bytes_to_ascii()*
hexer.bytes_to_ascii([input])
    Convert hex bytes to ASCII representation.
    
    Parameters:
      - input: Hex string to convert (optional, defaults to cursor word)

                                                           *hexer.abi_decode()*
hexer.abi_decode([input])
    Decode ABI calldata using Foundry's cast command.
    
    Parameters:
      - input: Hex calldata to decode (optional, defaults to cursor word)
    
    Note: Requires Foundry to be installed (https://getfoundry.sh/)

Example: >lua
    -- Format with custom group size
    require("hexer").format_calldata(nil, { group_size = 8 })
    
    -- Convert specific hex string
    require("hexer").bytes_to_ascii("0x48656c6c6f")
    
    -- Decode ABI calldata
    require("hexer").abi_decode("0x952899ee...")
<

==============================================================================
6. HEALTH CHECK                                                  *hexer-health*

Run `:checkhealth hexer` to verify your installation and configuration.

The health check will verify:
- Neovim version compatibility
- Plugin loading status
- Command availability
- Configuration status
- Basic functionality

==============================================================================
vim:tw=78:ts=8:ft=help:norl: